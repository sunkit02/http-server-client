#include "blackJack.h"
#include "base64.h"
#include "http.h"
#include "../server/server.h"
#include <stddef.h>
#include <stdlib.h>

GameData gameData;


// stack functions
void shuffle(char **unshuffledDeck) {
    srand(time(NULL));
    int checker = 0;
    int checkerTwo = 0;
    for (int i = 0; i < 1000; i++) {
        checker = (rand() % 52);
        checkerTwo = (rand() % 52);
        char *temp = unshuffledDeck[checker];
        unshuffledDeck[checker] = unshuffledDeck[checkerTwo];
        unshuffledDeck[checkerTwo] = temp;
    }
}

void printHand(int playerId, GameData currentState, int choice) {
    if (playerId == 0 && choice == 1) {
        printf("Dealer's hand: xx");
        for (int i = 1; i < HAND_SIZE; i++) {
            printf(", %s", currentState.players[playerId].hand[i]);
        }
        printf("\n");
    } else {
        printf("Player %d's hand: ", playerId);
        for (int i = 0; i < HAND_SIZE; i++) {
            printf(", %s", currentState.players[playerId].hand[i]);
        }
        printf("\n");
    }
}

// game functions

// adds cards from deck to hand
GameData hit(int playerId, GameData currentState) {
    currentState.players[playerId].hand[currentState.players[playerId].handCounter++] = currentState.deck[currentState.deckCounter++];

    player.handSize++;
    // for (int i = 0; i <= currentState.deckCounter; i++) {
    //   currentState.deck[i] = currentState.deck[i + 1];
    // }

    return currentState;
} // end of hit

// finds the total value of the hand
int checkHandTotal(char *playerHand[]) {
    int handTotal = 0;
    int value = 0;
    int aceCounter = 0;
    for (int x = 0; x < 10; x++) {
        switch (playerHand[x][0]) {
            case 'A':
                aceCounter++;
                value = 11;
                handTotal = handTotal + value;
                break;
            case 'J':
            case 'Q':
            case 'K':
            case 'T':
                value = 10;
                handTotal = handTotal + value;
                break;
            case '2':
                value = 2;
                handTotal = handTotal + value;
                break;
            case '3':
                value = 3;
                handTotal = handTotal + value;
                break;
            case '4':
                value = 4;
                handTotal = handTotal + value;
                break;
            case '5':
                value = 5;
                handTotal = handTotal + value;
                break;
            case '6':
                value = 6;
                handTotal = handTotal + value;
                break;
            case '7':
                value = 7;
                handTotal = handTotal + value;
                break;
            case '8':
                value = 8;
                handTotal = handTotal + value;
                break;
            case '9':
                value = 9;
                handTotal = handTotal + value;
                break;
            default:
                value = 0;
                break;
        } // end switch
    }   // end for
    if (aceCounter > 0) {
        while (handTotal > 21 && aceCounter > 0) {
            handTotal = handTotal - 10;
            aceCounter--;
        }
    }
    if (handTotal > 21) {
        printf("BUST\n");
    }
    return handTotal;
} // end of CheckHandTotal

// resets the hand
char *resetHand(char *playerHand) {
    for (int x = 0; x < 10; x++) {
        playerHand[x] = 0;
    } // end for
} // end of resetHand

// TODO fix issue with the constant loop of you win/ you lose. basically needs a
// way to cap of the function
GameData playDealer(GameData currentState) {
    int dealerTotal = checkHandTotal(currentState.players[0].hand);

    // printHand(0, currentState, 0);
    convertAndPrint(currentState.players[0].hand, HAND_SIZE);
    while (dealerTotal < 17 && dealerTotal > !21) {
        currentState = hit(0, currentState); // dealer hits
        dealerTotal = checkHandTotal(currentState.players[0].hand);
        printf("dealer hits, dealer: %d\n", dealerTotal);
    }

    // start at 1 becasue 0 is the dealer
    for (int i = 1; i < currentState.playerCount; i++) {
        currentState.players[i].total =
            checkHandTotal(currentState.players[i].hand);
        printf("\nPlayer %d:\n", i);
        // printHand(currentState.players[i].id, currentState, 0);
        convertAndPrint(currentState.players[i].hand, HAND_SIZE);

        if (dealerTotal > 21 ||
            (currentState.players[i].total == 21 && dealerTotal != 21)) {
                printf("  Player%d YOU WIN\n", i);
            } else if (currentState.players[i].total > 21) {
            printf(" Player%d YOU LOSE\n", i);
        } else if (currentState.players[i].total > dealerTotal) {
            printf(" player%d YOU WIN\n", i);
        } else {
            printf(" player%d, YOU LOSE\n", i);
        }
    }
    return currentState;
}

GameData Prompt(int playerId, GameData currentState) {
    char response[20];
    bool processing;
    printf("Player %d, hit or stand?\n", playerId);
    do {
        scanf("%s", response);
        if (strcmp(response, "hit") == 0) {
            currentState = hit(playerId, currentState);
            printHand(currentState.players[playerId].id, currentState, 0);
            processing = false;
        } else if (strcmp(response, "stand") == 0) {
            currentState.players[playerId].playing = false;
            processing = false;
        } else {
            printf("ya silly goose that wasn't an option\n");
        }
    } while (processing);
    return currentState;
} // end of prompt

bool clientPrompt() {
    char response[20];
    bool processing;
    printf("Hit or stand?\n");
    do {
        scanf("%s", response);
        if (strcmp(response, "hit") == 0) {
            // ADD SERVER 

            // send server "hit == true" 
            // get new hand from server
            convertAndPrint(newHand, HAND_SIZE);
            processing = false;
            return true;
        } else if (strcmp(response, "stand") == 0) {
            // ADD SERVER
            // send server "hit == false"
            processing = false;
            return false;
        } else {
            printf("ya silly goose that wasn't an option\n");
        }
    } while (processing);
} // end of prompt

GameData serverPrompt(int playerId, GameData currentState){
    // ADD SERVER
    //send prompt to client
    //recive answer from clinet
    bool responseHit;
    if (responseHit){
        currentState = hit(playerId, currentState);
        printHand(currentState.players[playerId].id, currentState, 0);
        // ADD SERVER
        // send player their hand to print
    } else {
        currentState.players[playerId].playing = false;
    }
    return currentState;
}


GameData initializeGame(GameData gameState){
    Card baseDeck[DECK_SIZE] = {
        "Ac", "2c", "3c", "4c", "5c", "6c", "7c", "8c", "9c", "Tc", "Jc",
        "Qc", "Kc", "Ad", "2d", "3d", "4d", "5d", "6d", "7d", "8d", "9d",
        "Td", "Jd", "Qd", "Kd", "Ah", "2h", "3h", "4h", "5h", "6h", "7h",
        "8h", "9h", "Th", "Jh", "Qh", "Kh", "As", "2s", "3s", "4s", "5s",
        "6s", "7s", "8s", "9s", "Ts", "Js", "Qs", "Ks",
    };

    gameState.deck = baseDeck;
    shuffle(gameState.deck);
    gameState.deckCounter = 0;

    // server determines numer of players
    gameState.playerCount = 3; // hardcoded fro now
    gameState.playerCount++;   // for dealer

    // intialize players
    for (int i = 0; i < gameState.playerCount + 1; i++) {
        gameState.players[i].playing = true;
        gameState.players[i].handCounter = 0;
        gameState.players[i].id = i;
    }
    for (int i = 0; i < gameState.playerCount; i++){
        hit(i, gameState);
        hit(i, gameState);
    }

    gameState.players[0].playing = false; // makes the game work
    return gameState;
}

void readyGame() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// main

void runServerBlackJack(){
    gameData = initializeGame(gameData);

    for (int x = 0; x < gameData.playerCount; x++) {
        gameData = hit(x, gameData);
        gameData = hit(x, gameData);
    }
    // ADD SERVER
    // 1 send first hand

    for (int x = 0; x < gameData.playerCount; x++) {
        //printf("Player %d\n", gameData.players[x].id);
        convertAndPrint(gameData.players[x].hand, HAND_SIZE);
        // printHand(x, gameData, 1);
    }

    gameData.playersTurn = true;
    // while (gameData.playersTurn) {
    //
    //   for (int i = 1; i < gameData.playerCount; i++) {
    //
    //     if (gameData.players[i].playing)
    //       gameData = serverPrompt(i, gameData);
    //   }
    //
    //   for (int i = 0; i < gameData.playerCount; i++) {
    //       if(gameData.players[i].playing == false){
    //         countFinishedPlayer++;
    //       }
    //   }
    //   printf(" count finished players %d\n", countFinishedPlayer);
    //   if (countFinishedPlayer == gameData.playerCount){
    //   gameData.playersTurn = false;
    //   }else{
    //     countFinishedPlayer = 0;
    //   }
    // }
    playDealer(gameData);

    // ADD SERVER
    // send final hands
}

void runClinetBlackJack(){
    // ADD SERVER
    //  1 recive first hand and dealers hand from server
    convertAndPrint(firstHand, HAND_SIZE);

    bool hitting;
    while(hitting){
        // ADD SERVER
        // wait for info to execute prompt
        hitting = clientPrompt();
    }

    //send dealer hand
    dealerTotal = checkHandTotal(dealerHand);
    //send player hand
    playerTotal = checkHandTotal(playerHand;);

    if (dealerTotal > 21 || (currentState.players[i].total == 21 && dealerTotal != 21)) {
        printf("  Player%d YOU WIN\n", i);
    } else if (currentState.players[i].total > 21) {
        printf(" Player%d YOU LOSE\n", i);
    } else if (currentState.players[i].total > dealerTotal) {
        printf(" player%d YOU WIN\n", i);
    } else {
        printf(" player%d, YOU LOSE\n", i);
    }
}

}


// int playGame(void) {
//
//   GameData gameState;
//   gameState = initializeGame(gameState);
//
//   for (int x = 0; x < gameState.playerCount; x++) {
//     gameState = hit(x, gameState);
//     gameState = hit(x, gameState);
//   }
//
//   // values must be sent to players to be printed by players
//   // for (int i = 0; i < gameState.playerCount + 1; i++) {
//   //   printHand(gameState.players[i]);
//   // }
//
//   // int countFinishedPlayer;
//   
//   for (int x = 0; x < gameState.playerCount; x++) {
//     //printf("Player %d\n", gameState.players[x].id);
//     convertAndPrint(gameState.players[x].hand, HAND_SIZE);
//     // printHand(x, gameState, 1);
//   }
//
//   gameState.playersTurn = true;
//   while (gameState.playersTurn) {
//
//     for (int i = 1; i < gameState.playerCount; i++) {
//
//       // call client
//       if (gameState.players[i].playing)
//         gameState = prompt(i, gameState);
//     }
//
//     for (int i = 0; i < gameState.playerCount; i++) {
//         if(gameState.players[i].playing == false){
//           countFinishedPlayer++;
//         }
//     }
//     if (countFinishedPlayer == gameState.playerCount){
//     gameState.playersTurn = false;
//     }else{
//       countFinishedPlayer = 0;
//     }
//   }
//
//   playDealer(gameState);
//
//   return 0;
// }

// int main(void) {
//   playGame();
//   return 0;
// }

// ####### SERVER FUNTIONS ######## //

void handleCreateGame(int clientSocket, HttpRequest *request) {
    HttpResponse *response;
    if (gameData.playerCount == 0) {
        // Add host to players
        Player host;
        host.id = HOST_PLAYER_ID;
        host.handSize = 0;

        // offset by 1 for dealer
        gameData.players[1 + playerCount++] = host;
        gameData.currentGameStatus = WAITING;

        size_t inputSize = sizeof(Player);
        char *hostSerialized = base64_encode(&host, inputSize, &inputSize);

        response = constructHttpResponse(200, NULL, hostSerialized);

        free(hostSerialized);
    } else {
        response = constructHttpResponse(400, NULL, "Game already created");
    }

    respondToHttpRequest(clientSocket, response);

    httpResponseDestroy(response);
}

void handleJoinGame(int clientSocket, HttpRequest *request) {
    HttpResponse *response;

    if (gamedata.currentGameStatus == WAITING) {
        Player player;
        player.id = playerCount;
        player.handSize = 0;

        // offset by 1 for dealer
        gameData.players[1 + playerCount++] = player;

        if (playerCount >= MAX_PLAYERS) {
            gameData.currentGameStatus = FULL;
        }

        size_t inputSize = sizeof(Player);
        char *playerSerialized = base64_encode(&player, inputSize, &inputSize);

        response = constructHttpResponse(200, NULL, playerSerialized);

        free(playerSerialized);
    } else {
        response = constructHttpResponse(400, NULL, "Game already full");
    }

    respondToHttpRequest(clientSocket, response);

    httpResponseDestroy(response);
}

void handleStartGame(int clientSocket, HttpRequest *request) {
    // Require player id to be sent in request body
    int playerId = atoi(request->body);

    if (playerId == HOST_PLAYER_ID) {
        // Start game
        initializeGame(gameData);
    } else {
        response = constructHttpResponse(400, NULL, "You are not the host");
    }

    respondToHttpRequest(clientSocket, response);

    httpResponseDestroy(response);
}

void handleHit(int clientSocket, HttpRequest *request) {
    HttpResponse *response;

    // require hit or not in request body
    size_t inputSize = strlen(request->body);
    Player *player = base64_decode(request->body, inputSize, &inputSize);

    serverPrompt(player->id, GameData currentState);



    respondToHttpRequest(clientSocket, response);

    httpResponseDestroy(response);
}

void handleCheckGameStatus(int clientSocket, HttpRequest *request) {

}
